name: Build

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86, x86_64, arm32, arm64]
        exclude:
          - os: macos-latest
            arch: x86
          - os: macos-latest
            arch: arm32

    steps:
      - name: Fetch sources
        uses: actions/checkout@v5

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake build-essential \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install ninja cmake -y

      - name: Install macOS dependencies
        if: runner.os == 'macos'
        run: brew install ninja cmake

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          BUILD_DIR="${{ github.workspace }}/build/.cxx/${{ matrix.os }}/${{ matrix.arch }}"
          mkdir -p "$BUILD_DIR"

          TOOLCHAIN=""
          SYSTEM_PROCESSOR=""

          if [[ "${{ matrix.arch }}" == "x86" ]]; then
            SYSTEM_PROCESSOR="i686"
          elif [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            SYSTEM_PROCESSOR="x86_64"
          elif [[ "${{ matrix.arch }}" == "arm32" ]]; then
            SYSTEM_PROCESSOR="arm"
            TOOLCHAIN="-DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++"
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            SYSTEM_PROCESSOR="aarch64"
            TOOLCHAIN="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
          fi

          cmake -S "${{ github.workspace }}/src/main/cpp" \
                -B "$BUILD_DIR" \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_SYSTEM_PROCESSOR=$SYSTEM_PROCESSOR \
                $TOOLCHAIN

      - name: Configure CMake (macOS)
        if: runner.os == 'macos'
        run: |
          BUILD_DIR="${{ github.workspace }}/build/.cxx/${{ matrix.os }}/${{ matrix.arch }}"
          mkdir -p "$BUILD_DIR"

          ARCH_FLAG=$([[ "${{ matrix.arch }}" == "x86_64" ]] && echo "x86_64" || echo "${{ matrix.arch }}")

          cmake -S "${{ github.workspace }}/src/main/cpp" \
                -B "$BUILD_DIR" \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_OSX_ARCHITECTURES=$ARCH_FLAG

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $BUILD_DIR="${{ github.workspace }}\build\.cxx\${{ matrix.os }}\${{ matrix.arch }}"
          New-Item -ItemType Directory -Force -Path $BUILD_DIR | Out-Null
          
          $ARCH = '${{ matrix.arch }}'
          $ARCH_FLAG = if ($ARCH -eq 'x86') { '-A Win32' } elseif ($ARCH -eq 'x86_64') { '-A x64' } elseif ($ARCH -eq 'arm64') { '-A ARM64' } else { '' }
          
          cmake -S "${{ github.workspace }}\src\main\cpp" `
                -B $BUILD_DIR `
                $ARCH_FLAG

      - name: Build C++ Code
        run: cmake --build ${{ github.workspace }}/build/.cxx/${{ matrix.os }}/${{ matrix.arch }} --config Release

      - name: Collect Native Libs (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $artifactsDir = "${{ github.workspace }}\artifacts"
          New-Item -ItemType Directory -Force -Path $artifactsDir | Out-Null
          
          Get-ChildItem -Path "${{ github.workspace }}\build\.cxx\${{ matrix.os }}\${{ matrix.arch }}" -Recurse -Include *.dll -File | ForEach-Object {
            $dest = Join-Path $artifactsDir $_.Name
            Copy-Item $_.FullName -Destination $dest -Force
          }

      - name: Collect Native Libs (linux/macos)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          OS=$(echo "${{ matrix.os }}" | sed 's/-latest//')
          for f in $(find ${{ github.workspace }}/build/.cxx/${{ matrix.os }}/${{ matrix.arch }} -type f \( -name "*.so" -o -name "*.dll" -o -name "*.dylib" \)); do
            base=$(basename "$f")
            ext="${base##*.}"
            name="${base%.*}"
            cp "$f" "artifacts/${name}_${OS}_${{ matrix.arch }}.${ext}"
          done
        shell: bash

      - name: Upload native artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-libs-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/

  build-java:
    runs-on: ubuntu-latest
    needs: build-native
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download native artifacts
        uses: actions/download-artifact@v5
        with:
          path: native-artifacts
          merge-multiple: true

      - name: Copy native libs into Java resources
        run: |
          mkdir -p src/main/resources/native
          cp -r native-artifacts/* src/main/resources/native/

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Java project
        run: ./gradlew clean fatJar -PoffBuildLibs=true

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          path: build/libs/*.jar

      - name: Extract version
        run: |
          VERSION=$(sed -nE 's/^version = "([0-9\.]+)".*\/\/ CI_PROJECT_VERSION/\1/p' build.gradle.kts)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION = $VERSION"

      - name: Create Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.VERSION }}" \
            --draft \
            --title "v${{ env.VERSION }}" \
            build/libs/*.jar
